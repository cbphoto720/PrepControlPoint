function localOrigin=generateLeviLLZ(GPSpoints, date, imgtime, path)
%generateLeviLLZ: Create survey data for the GPS points.  Generate a local
%reference coordinate system & arrange Lon/Lat and time in the required
%format for PickControlPointV5 software.
%{
Inputs:
    - GPSpoints =   [table] Table generated by importing iG8 data from the
                     Landstar phone app.  See importGPSpoints.m
    - date      =   [yyyyMMdd](string) date of img capture
    - imgtime   =   [datetime vector] Spoofed data of img capture times.
                    GPS shots are recorded a few seconds after.

Created by Carson Black on 20240821.
ccblack@ucsd.edu
%}
%% Input Parsing
try
    capturedate=datetime(date,'InputFormat','yyyyMMdd');
catch
    error('Problem reading date.  Please use a char array or string [yyyymmdd]');
    % capturedate =datetime('20240101','InputFormat','yyyyMMdd');
end

p= inputParser;
checkTableFields = @(tbl) istable(tbl) && all(ismember({'Longitude', 'Latitude', 'Elevation'}, tbl.Properties.VariableNames));
% validDate = @(x) datetime(capturedate,'Format','yyyyMMdd')==x;
validDate = @(x) ischar(x) || isstring(x) && ~isempty(datetime(x, 'InputFormat', 'yyyyMMdd', 'Format', 'yyyyMMdd'));
validimgtime =  @(x) isdatetime(x) && isvector(x);

addRequired(p, 'GPSpoints',checkTableFields);
addRequired(p, 'date',validDate);
addRequired(p, 'imgtime',validimgtime);
addRequired(p, 'path',@(x) isfolder(x));

try
    parse(p,GPSpoints,date,imgtime, path);

    if size(x(:,1)) ~= size(GPSpoints(:,1))
        error('The number of rows in imgtime must match the number of rows in GPSpoints.');
    end
% catch e
    % error('Failed to pass input parser.  Check that inputs are valid for this function.');
end
%% Generate Data
wgs84 = wgs84Ellipsoid; % Define ellipsoid
localOrigin = [GPSpoints.Latitude(1),GPSpoints.Longitude(1),GPSpoints.Elevation(1)]; % Set first point as origin
% Convert lat, lon to local coordinate system
[local.xEast,local.yNorth,local.zUp] = geodetic2enu(GPSpoints.Latitude,GPSpoints.Longitude,GPSpoints.Elevation,localOrigin(1),localOrigin(2),localOrigin(3),wgs84);

% add delay to imgtime
imgtime=imgtime+milliseconds(250);

%% Create the text file
filename=strcat(date,'Survey.llz');

% Check if the file already exists
overwriteFile = true; % Default to overwriting or creating new file.
if exist(fullfile(path,filename),'file')
    promptMessage = sprintf('This file already exists:\n%s\nDo you want to overwrite it?', filename);
    titleBarCaption = 'Overwrite?';
    buttonText = questdlg(promptMessage, titleBarCaption, 'Yes', 'No', 'Yes');
    if strcmpi(buttonText, 'No')
        % User does not want to overwrite. 
        % Set flag to not do the write.
        overwriteFile = false;
        error('user chose not to overwrite the existing file');
    end
end
if overwriteFile
    fid=fopen(fullfile(path,filename),'w');

    fprintf(fid,'Year \t Month \t Day \t Hour \t Min \t Sec \t Lat \t Lon \t X \t Y \t Z',size(GPSpoints,1));
    for i=1:size(GPSpoints,1)
        % TAB DELIMITED: '\n%s \t %s \t %s \t %s \t %s \t %s \t %f \t %f \t %f \t %f \t %f'
        
        fprintf(fid, '\n%s %s %s %s %s %s %f %f %f %f %f',...
            datetime(imgtime(i), 'Format', 'yyyy'),...
            datetime(imgtime(i), 'Format', 'MM'),...
            datetime(imgtime(i), 'Format', 'dd'),...
            datetime(imgtime(i), 'Format', 'HH'),...
            datetime(imgtime(i), 'Format', 'mm'),...
            datetime(imgtime(i), 'Format', 'ss'),...
            GPSpoints.Latitude(i),...
            GPSpoints.Longitude(i),...
            local.xEast(i),...
            local.yNorth(i),...
            GPSpoints.Elevation(i));
    end
    fclose(fid);
    
    fprintf('Success! File has been created here: %s\n',fullfile(path,filename))

end

end